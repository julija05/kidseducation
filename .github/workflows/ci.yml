name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    if: github.event.pull_request.draft == false

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: kids_education_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, bcmath, gd, zip, curl
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: /tmp/composer-cache
        key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

    - name: Install Composer dependencies
      run: |
        composer install --no-progress --prefer-dist --optimize-autoloader --no-dev
        composer dump-autoload

    - name: Install NPM dependencies
      run: npm ci

    - name: Wait for MySQL to be ready
      run: |
        until nc -z 127.0.0.1 3306; do
          echo "Waiting for MySQL..."
          sleep 1
        done
        echo "MySQL is ready!"

    - name: Create environment files with MySQL
      run: |
        # Create storage directories
        mkdir -p storage/framework/cache/data
        mkdir -p storage/framework/sessions
        mkdir -p storage/framework/views
        mkdir -p bootstrap/cache
        
        # Force create .env with MySQL configuration
        cat > .env << EOF
        APP_NAME=Abacoding
        APP_ENV=testing
        APP_KEY=base64:lQWK7hWa3k4hb4R2J6rbua6liNgTwONkuQ2ZohXmNJA=
        APP_DEBUG=true
        
        DB_CONNECTION=mysql
        DB_HOST=127.0.0.1
        DB_PORT=3306
        DB_DATABASE=kids_education_test
        DB_USERNAME=root
        DB_PASSWORD=password
        
        CACHE_STORE=array
        SESSION_DRIVER=array
        QUEUE_CONNECTION=sync
        MAIL_MAILER=array
        EOF
        
        # Copy to .env.testing
        cp .env .env.testing

    - name: Generate application key
      run: |
        php artisan key:generate
        php artisan key:generate --env=testing

    - name: Debug and clear caches
      run: |
        # Debug: Show environment
        echo "=== Environment Check ==="
        echo "DB_CONNECTION: $(grep DB_CONNECTION .env)"
        echo "CACHE_STORE: $(grep CACHE_STORE .env)"
        
        # Test database connection
        echo "=== Database Connection Test ==="
        DB_CONNECTION=mysql php artisan tinker --execute="echo 'DB Connection: ' . config('database.default'); echo '\nCache Driver: ' . config('cache.default');"
        
        # Remove any cached files
        rm -rf bootstrap/cache/*
        
        # Set environment explicitly and clear caches
        DB_CONNECTION=mysql CACHE_STORE=array php artisan config:clear
        DB_CONNECTION=mysql CACHE_STORE=array php artisan cache:clear  
        DB_CONNECTION=mysql CACHE_STORE=array php artisan view:clear

    - name: Run database migrations
      run: php artisan migrate --env=testing --force

    - name: Seed database
      run: php artisan db:seed --env=testing --force

    - name: Build frontend assets
      run: npm run build

    - name: Override PHPUnit config for CI
      run: |
        # Create a CI-specific PHPUnit config to ensure MySQL usage
        cp phpunit.xml phpunit.ci.xml
        sed -i 's|<env name="DB_CONNECTION" value=".*"/>|<env name="DB_CONNECTION" value="mysql"/>|' phpunit.ci.xml
        sed -i 's|<env name="DB_DATABASE" value=".*"/>|<env name="DB_DATABASE" value="kids_education_test"/>|' phpunit.ci.xml

    - name: Run PHP tests
      run: |
        # Run tests with explicit environment variables
        DB_CONNECTION=mysql DB_DATABASE=kids_education_test ./vendor/bin/phpunit --configuration=phpunit.ci.xml --coverage-text --colors=never

    - name: Run PHP Static Analysis (PHPStan)
      run: |
        composer require --dev phpstan/phpstan --no-update
        composer update phpstan/phpstan
        ./vendor/bin/phpstan analyse --memory-limit=2G || true

    - name: Run Code Style Check (PHP CS Fixer)
      run: |
        composer require --dev friendsofphp/php-cs-fixer --no-update
        composer update friendsofphp/php-cs-fixer
        ./vendor/bin/php-cs-fixer fix --dry-run --diff || true

  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: test
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, bcmath, gd, zip

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: /tmp/composer-cache
        key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

    - name: Install NPM dependencies
      run: npm ci

    - name: Build frontend assets for production
      run: npm run build

    - name: Optimize Laravel for production
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: built-app
        path: |
          public/build/
          bootstrap/cache/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Run security audit
      run: |
        composer require --dev enlightn/security-checker --no-update
        composer update enlightn/security-checker
        ./vendor/bin/security-checker security:check composer.lock || true

    - name: Run npm audit
      run: npm audit --audit-level high || true

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install NPM dependencies
      run: npm ci

    - name: Run ESLint
      run: |
        npm install eslint @eslint/js eslint-plugin-react eslint-plugin-react-hooks --save-dev
        npx eslint resources/js --ext .js,.jsx --max-warnings 0 || true

    - name: Run Prettier check
      run: |
        npm install prettier --save-dev
        npx prettier --check resources/js/**/*.{js,jsx} || true

    - name: Check for large files
      run: |
        find . -type f -size +50M -not -path "./vendor/*" -not -path "./node_modules/*" -not -path "./.git/*" || true